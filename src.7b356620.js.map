{"version":3,"sources":["settings.js","velocityFunctions.js","boidFuctions.js","index.js"],"names":["offset","x","y","tailLength","visualRange","boidTypes","red","color","tailColor","speedLimit","count","centeringFactor","matchingFactor","avoidSelf","distance","factor","avoidOther","avoidCursor","blue","yellow","module","exports","boid1","boid2","Math","sqrt","flyTowardsCenter","boid","boids","centerX","centerY","numNeighbors","otherBoid","type","dx","dy","keepWithinBounds","width","height","margin","turnFactor","random","turnFactorx","turnFactory","limitSpeed","speed","matchVelocity","avgDX","avgDY","minDistance","avoidFactor","moveX","moveY","curser","makeBoids","boidsArray","boidProps","i","push","history","drawBoid","context","angle","atan2","translate","rotate","fillStyle","beginPath","moveTo","lineTo","fill","setTransform","strokeStyle","point","stroke","window","innerWidth","innerHeight","onload","document","addEventListener","event","clientX","clientY","resize","requestAnimationFrame","getNextFrame","onresize","root","getElementById","slice","min","getContext","clearRect"],"mappings":"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","file":"src.7b356620.js","sourceRoot":"..\\src","sourcesContent":["const offset = { x: 30, y: 30 };\r\n\r\nconst tailLength = 10;\r\n\r\nconst visualRange = 75;\r\n\r\nconst boidTypes = {\r\n    red: {\r\n        color: '#d33021',\r\n        tailColor: '#d3302166',\r\n        speedLimit: 3,\r\n        count: 40,\r\n        centeringFactor: 0.005,\r\n        matchingFactor: 0.05,\r\n        avoidSelf: {\r\n            distance: 20,\r\n            factor: 0.05,\r\n        },\r\n        avoidOther: {\r\n            distance: 10,\r\n            factor: 0.005,\r\n        },\r\n        avoidCursor: {\r\n            distance: 100,\r\n            factor: -0.06,\r\n        },\r\n    },\r\n    blue: {\r\n        color: '#558cf4',\r\n        tailColor: '#558cf466',\r\n        speedLimit: 7,\r\n        count: 20,\r\n        centeringFactor: 0.005,\r\n        matchingFactor: 0.05,\r\n        avoidSelf: {\r\n            distance: 100,\r\n            factor: 0.05,\r\n        },\r\n        avoidOther: {\r\n            distance: 70,\r\n            factor: 1,\r\n        },\r\n        avoidCursor: {\r\n            distance: 100,\r\n            factor: 0.06,\r\n        },\r\n    },\r\n    yellow: {\r\n        color: '#d38921',\r\n        tailColor: '#d3892166',\r\n        speedLimit: 5,\r\n        count: 15,\r\n        centeringFactor: 0.02,\r\n        matchingFactor: 0.05,\r\n        avoidSelf: {\r\n            distance: 30,\r\n            factor: 0.05,\r\n        },\r\n        avoidOther: {\r\n            distance: 70,\r\n            factor: 0.05,\r\n        },\r\n        avoidCursor: {\r\n            distance: 0,\r\n            factor: 0,\r\n        },\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    offset,\r\n    tailLength,\r\n    boidTypes,\r\n    visualRange\r\n}","import { visualRange } from \"./settings\";\r\n\r\nconst distance = (boid1, boid2) => {\r\n    return Math.sqrt(\r\n        (boid1.x - boid2.x) * (boid1.x - boid2.x) +\r\n        (boid1.y - boid2.y) * (boid1.y - boid2.y),\r\n    );\r\n}\r\n\r\nconst flyTowardsCenter = (boid, boids) => {\r\n    const centeringFactor = boid.centeringFactor || 0.005;\r\n\r\n    let centerX = 0;\r\n    let centerY = 0;\r\n    let numNeighbors = 0;\r\n\r\n    for (let otherBoid of boids) {\r\n        if (otherBoid.type === boid.type && distance(boid, otherBoid) < visualRange) {\r\n            centerX += otherBoid.x;\r\n            centerY += otherBoid.y;\r\n            numNeighbors += 1;\r\n        }\r\n    }\r\n\r\n    if (numNeighbors) {\r\n        centerX = centerX / numNeighbors;\r\n        centerY = centerY / numNeighbors;\r\n\r\n        boid.dx += (centerX - boid.x) * centeringFactor;\r\n        boid.dy += (centerY - boid.y) * centeringFactor;\r\n    }\r\n}\r\n\r\nconst keepWithinBounds = (boid, width, height) => {\r\n    const margin = 200;\r\n    const turnFactor = Math.random();\r\n    const turnFactorx = Math.random() * 0.5 - 0.25;\r\n    const turnFactory = Math.random() * 0.5 - 0.25;\r\n\r\n    boid.dx += turnFactorx;\r\n    boid.dy += turnFactory;\r\n\r\n    if (boid.x < margin) {\r\n        boid.dx += turnFactor;\r\n    }\r\n    if (boid.x > width - margin) {\r\n        boid.dx -= turnFactor\r\n    }\r\n    if (boid.y < margin) {\r\n        boid.dy += turnFactor;\r\n    }\r\n    if (boid.y > height - margin) {\r\n        boid.dy -= turnFactor;\r\n    }\r\n}\r\n\r\nconst limitSpeed = (boid) => {\r\n    let speedLimit = boid.speedLimit || 2;\r\n\r\n    const speed = Math.sqrt(boid.dx * boid.dx + boid.dy * boid.dy);\r\n    if (speed > speedLimit) {\r\n        boid.dx = (boid.dx / speed) * speedLimit;\r\n        boid.dy = (boid.dy / speed) * speedLimit;\r\n    }\r\n}\r\n\r\nconst matchVelocity = (boid, boids) => {\r\n    const matchingFactor = boid.matchingFactor || 0.05;\r\n\r\n    let avgDX = 0;\r\n    let avgDY = 0;\r\n    let numNeighbors = 0;\r\n\r\n    for (let otherBoid of boids) {\r\n        if (boid.type === otherBoid.type && distance(boid, otherBoid) < visualRange) {\r\n            avgDX += otherBoid.dx;\r\n            avgDY += otherBoid.dy;\r\n            numNeighbors += 1;\r\n        }\r\n    }\r\n\r\n    if (numNeighbors) {\r\n        avgDX = avgDX / numNeighbors;\r\n        avgDY = avgDY / numNeighbors;\r\n\r\n        boid.dx += (avgDX - boid.dx) * matchingFactor;\r\n        boid.dy += (avgDY - boid.dy) * matchingFactor;\r\n    }\r\n}\r\n\r\n\r\nconst avoidSelf = (boid, boids) => {\r\n    const minDistance = boid.avoidSelf.distance || 20;\r\n    const avoidFactor = boid.avoidSelf.factor || 0.05;\r\n    let moveX = 0;\r\n    let moveY = 0;\r\n    for (let otherBoid of boids) {\r\n        if (otherBoid.type === boid.type && otherBoid !== boid) {\r\n            if (distance(boid, otherBoid) < minDistance) {\r\n                moveX += boid.x - otherBoid.x;\r\n                moveY += boid.y - otherBoid.y;\r\n            }\r\n        }\r\n    }\r\n\r\n    boid.dx += (moveX / 2) * avoidFactor;\r\n    boid.dy += (moveY / 2) * avoidFactor;\r\n}\r\n\r\nconst avoidOther = (boid, boids) => {\r\n    const minDistance = boid.avoidOther.distance || 20;\r\n    const avoidFactor = boid.avoidOther.factor || 0.05;\r\n    let moveX = 0;\r\n    let moveY = 0;\r\n    for (let otherBoid of boids) {\r\n        if (otherBoid !== boid) {\r\n            if (otherBoid.type !== boid.type && distance(boid, otherBoid) < minDistance) {\r\n                moveX += boid.x - otherBoid.x;\r\n                moveY += boid.y - otherBoid.y;\r\n            }\r\n        }\r\n    }\r\n\r\n    boid.dx += (moveX / 2) * avoidFactor;\r\n    boid.dy += (moveY / 2) * avoidFactor;\r\n}\r\n\r\nconst avoidCursor = (boid, curser) => {\r\n    const minDistance = boid.avoidCursor.distance;\r\n    const avoidFactor = boid.avoidCursor.factor;\r\n    let moveX = 0;\r\n    let moveY = 0;\r\n\r\n    if (distance(boid, curser) < minDistance) {\r\n        moveX += boid.x - curser.x;\r\n        moveY += boid.y - curser.y;\r\n    }\r\n\r\n    boid.dx += (moveX / 2) * avoidFactor;\r\n    boid.dy += (moveY / 2) * avoidFactor;\r\n}\r\n\r\nmodule.exports = {\r\n    flyTowardsCenter,\r\n    keepWithinBounds,\r\n    limitSpeed,\r\n    matchVelocity,\r\n    avoidSelf,\r\n    avoidOther,\r\n    avoidCursor\r\n}","import { offset, boidTypes } from './settings';\r\n\r\nexport const makeBoids = (width, height) => {\r\n    let boidsArray = [];\r\n    for (let type in boidTypes) {\r\n        let boidProps = boidTypes[type];\r\n        for (let i = 0; i < boidProps.count; i++) {\r\n            boidsArray.push({\r\n                x: Math.random() * (width - 60) + offset.x,    // creates a random number between 0 to width\r\n                y: Math.random() * (height - 60) + offset.y,   // creates a random number between 0 to height\r\n                dx: Math.random() * 10 - 5,  // creates a random number between -5 to 5\r\n                dy: Math.random() * 10 - 5,  // creates a random number between -5 to 5\r\n                history: [],\r\n                type,\r\n                ...boidProps,\r\n            })\r\n        }\r\n    }\r\n    return boidsArray;\r\n}\r\n\r\nexport const drawBoid = (context, boid) => {\r\n    const angle = Math.atan2(boid.dy, boid.dx);\r\n    context.translate(boid.x, boid.y);\r\n    context.rotate(angle);\r\n    context.translate(-boid.x, -boid.y);\r\n    context.fillStyle = boid.color;\r\n    context.beginPath();\r\n    context.moveTo(boid.x, boid.y);\r\n    context.lineTo(boid.x - 15, boid.y + 5);\r\n    context.lineTo(boid.x - 15, boid.y - 5);\r\n    context.lineTo(boid.x, boid.y);\r\n    context.fill();\r\n    context.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n    context.strokeStyle = boid.tailColor;\r\n    context.beginPath();\r\n    context.moveTo(boid.history[0][0], boid.history[0][1]);\r\n    for (const point of boid.history) {\r\n        context.lineTo(point[0], point[1]);\r\n    }\r\n    context.stroke();\r\n}","import { offset, tailLength } from './settings';\r\nimport { flyTowardsCenter, matchVelocity, avoidSelf, avoidOther, avoidCursor, limitSpeed, keepWithinBounds } from './velocityFunctions';\r\nimport { makeBoids, drawBoid } from './boidFuctions';\r\n\r\nlet width = window.innerWidth - offset.x;\r\nlet height = window.innerHeight - offset.y;\r\n\r\nconst curser = { x: 0, y: 0 };\r\n\r\nlet boids = [];\r\n\r\nwindow.onload = () => {\r\n    document.addEventListener('mousemove', (event) => {\r\n        curser.x = event.clientX;\r\n        curser.y = event.clientY;\r\n    });\r\n\r\n    resize();\r\n    boids = makeBoids(width, height);\r\n    window.requestAnimationFrame(getNextFrame);\r\n}\r\n\r\nwindow.onresize = () => resize();\r\n\r\nconst resize = () => {\r\n    let root = document.getElementById('root');\r\n    root.width = window.innerWidth - offset.x;\r\n    root.height = window.innerHeight - offset.y;\r\n    width = window.innerWidth - offset.x;\r\n    height = window.innerHeight - offset.y;\r\n}\r\n\r\nconst getNextFrame = () => {\r\n\r\n    for (let boid of boids) {\r\n        flyTowardsCenter(boid, boids);\r\n        matchVelocity(boid, boids);\r\n        avoidSelf(boid, boids);\r\n        avoidOther(boid, boids);\r\n        avoidCursor(boid, curser);\r\n        limitSpeed(boid);\r\n        keepWithinBounds(boid, width, height);\r\n\r\n        boid.x += boid.dx;\r\n        boid.y += boid.dy;\r\n        boid.history.push([boid.x, boid.y])\r\n        boid.history = boid.history.slice(Math.min(-1, -tailLength));\r\n    }\r\n\r\n    const context = document.getElementById(\"root\").getContext(\"2d\");\r\n    context.clearRect(0, 0, width, height);\r\n    for (let boid of boids) {\r\n        drawBoid(context, boid);\r\n    }\r\n\r\n    window.requestAnimationFrame(getNextFrame);\r\n}\r\n"]}